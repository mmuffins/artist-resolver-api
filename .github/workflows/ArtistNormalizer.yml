name: build

on:
  workflow_dispatch:
  push:
    branches: 
      - main
  pull_request:

env:
  version: "1.2.0.${{ github.run_number }}${{ github.run_attempt }}"

jobs:
  build:
    runs-on: windows-latest
    env:
      build_configuration: Release
      build_runtime: win-x64
      build_framework: net7.0
    
    steps:
    - uses: actions/checkout@v1
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7
      
    - name: dotnet restore
      run: dotnet restore
      
    - name: dotnet publish
      run: dotnet publish ArtistNormalizer.API\ArtistNormalizer.API.csproj --configuration ${{ env.build_configuration }} -p:PublishSingleFile=false --self-contained false -p:PublishTrimmed=false -p:PublishReadyToRun=true --runtime ${{ env.build_runtime }} --framework ${{ env.build_framework }} -p:Version=${{ env.version }} -p:PackageVersion=${{ env.version }} --output publish

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/publish
      
    - name: dotnet test
      run: dotnet test ArtistNormalizer.API.sln --configuration ${{ env.build_configuration }} --framework ${{ env.build_framework }} --verbosity normal --logger "trx;LogFileName=TestResults.trx"
        
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
        name: Unit Test Results
        path: Tests/**/TestResults.trx
        reporter: dotnet-trx

  release:
    # if: ${{ github.event_name != 'pull_request'  && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Get artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/publish
      
    - name: Zip Files
      run: zip "${{ github.workspace }}/publish/ArtistNormalizer.zip" "${{ github.workspace }}/"
      
    # - name: Zip Files
    #  run: Compress-Archive -Path "${{ github.workspace }}\publish\*" -DestinationPath "${{ github.workspace }}\publish\ArtistNormalizer.zip"
      
    - name: Create release
      uses: actions/github-script@v6
      id: create-release
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const {data: newRelease} = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Artist Normalizer ${{ env.version  }}',
            tag_name: '${{ env.version  }}',
            generate_release_notes: true,
            draft: false,
            prerelease: false
          });
          console.log(`Release has been created with id ${newRelease.id}: ${newRelease.html_url}`)
          core.setOutput("url", newRelease.html_url)
          core.setOutput("id", newRelease.id)
          
    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises
          const attachment = await fs.readFile("./publish/ArtistNormalizer.zip")
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: '${{ steps.create-release.outputs.id }}',
            data: attachment,
            name: 'ArtistNormalizer.zip'
          });
